#============================== USER DEFINITIONS ==============================#
# Project name
PROJECT_NAME = Template

# Objets dir
OBJDIR = .objs

# Tools
## Remove
RM = rm
## C Compiler
CC = gcc
## C++ Compiler
CXX = g++
## Linker
LD = g++

# Files excluded from compiling
# Info: You need to specify relative path, example: ./test3/test3.c
EXCLUDED_FILES =

# Additional include dirs, outside of source folder
ADDITIONAL_INC_DIRS =

# Flags
## C flags
CFLAGS =
### Warnings
# Essential
CFLAGS +=-Wall -Wextra
# Useful because usually testing floating-point numbers for equality is bad
CFLAGS +=-Wfloat-equal
# Warn if an uninitialized identifier is evaluated in an #if directive
CFLAGS +=-Wundef
# Warn whenever a local variable shadows another local variable, parameter or
# global variable or whenever a built-in function is shadowed
CFLAGS +=-Wshadow
# Warn if anything depends upon the size of a function or of void
CFLAGS +=-Wpointer-arith
# Warn whenever a pointer is cast such that the required alignment of the target
# is increased. For example, warn if a char * is cast to an int * on machines
# where integers can only be accessed at two- or four-byte boundaries
CFLAGS +=-Wcast-align
# Warn if a function is declared or defined without specifying the argument
# types
CFLAGS +=-Wstrict-prototypes
# Warns about cases where the compiler optimizes based on the assumption that
# signed overflow does not occur
# (The value 5 may be too strict, see the manual page)
CFLAGS +=-Wstrict-overflow=5
# Give string constants the type const char[length] so that copying the address
# of one into a non-const char * pointer will get a warning.
CFLAGS +=-Wwrite-strings
# Warn if any functions that return structures or unions are defined or called
CFLAGS +=-Waggregate-return
# Warn whenever a pointer is cast to remove a type qualifier from the target
# type*
CFLAGS +=-Wcast-qual
# Warn whenever a switch statement does not have a default case*
CFLAGS +=-Wswitch-default
# Warn whenever a switch statement has an index of enumerated type and lacks a
# case for one or more of the named codes of that enumeration*.
CFLAGS +=-Wswitch-enum
# Warn for implicit conversions that may alter a value*.
CFLAGS +=-Wconversion
# Warn if the compiler detects that code will never be executed*.
CFLAGS +=-Wunreachable-code

## CXX flags
CXXFLAGS =
### Warnings
# Essential
CXXFLAGS +=-Wall -Wextra
# Useful because usually testing floating-point numbers for equality is bXXad
CXXFLAGS +=-Wfloat-equal
# Warn if an uninitialized identifier is evaluated in an #if directive
CXXFLAGS +=-Wundef
# Warn whenever a local variable shadows another local variable, parameter or
# global variable or whenever a built-in function is shadowed
CXXFLAGS +=-Wshadow
# Warn if anything depends upon the size of a function or of void
CXXFLAGS +=-Wpointer-arith
# Warn whenever a pointer is cast such that the required alignment of the target
# is increased. For example, warn if a char * is cast to an int * on machines
# where integers can only be accessed at two- or four-byte boundaries
CXXFLAGS +=-Wcast-align
# Warns about cases where the compiler optimizes based on the assumption that
# signed overflow does not occur
# (The value 5 may be too strict, see the manual page)
CXXFLAGS +=-Wstrict-overflow=5
# Give string constants the type const char[length] so that copying the address
# of one into a non-const char * pointer will get a warning.
CXXFLAGS +=-Wwrite-strings
# Warn if any functions that return structures or unions are defined or called
CXXFLAGS +=-Waggregate-return
# Warn whenever a pointer is cast to remove a type qualifier from the target
# type*
CXXFLAGS +=-Wcast-qual
# Warn whenever a switch statement does not have a default case*
CXXFLAGS +=-Wswitch-default
# Warn whenever a switch statement has an index of enumerated type and lacks a
# case for one or more of the named codes of that enumeration*.
CXXFLAGS +=-Wswitch-enum
# Warn for implicit conversions that may alter a value*.
CXXFLAGS +=-Wconversion
# Warn if the compiler detects that code will never be executed*.
CXXFLAGS +=-Wunreachable-code

### Oprimization
# No optimization
# OPTFLAGS +=-O0
# Adivised
# OPTFLAGS +=-O2
# Space optimization, level -02 mostly as well
# OPTFLAGS +=-Os
# For debugging
OPTFLAGS +=-Og

# Debugging
DEBFLAGS =-g

## Generate .d files
DEPFLAGS =-MMD -MP -MF"$(@:%.o=%.d)" -MT"$@"
### For ricing
DEPFLAGS_ECHO =-MMD -MP -MF"$(BLUE_COLOR)$(@:%.o=%.d)$(END_COLOR)" -MT"$(BLUE_COLOR)$@$(END_COLOR)"

# Linker flags
LDFLAGS =


#============================= COLOR DEFINITIONS ==============================#
WHITE_COLOR = \e[1;37m
LIGHT_GRAY_COLOR = \e[0;37m
DARK_GRAY_COLOR = \e[1;30m
BLACK_COLOR = \e[0;30m
YELLOW_COLOR = \e[1;33m
ORANGE_COLOR = \e[0;33m
LIGHT_RED_COLOR = \e[1;31m
RED_COLOR = \e[0;31m
LIGHT_PURPLE_COLOR = \e[1;35m
PURPLE_COLOR = \e[0;35m
LIGHT_BLUE_COLOR = \e[1;34m
BLUE_COLOR = \e[0;34m
LIGHT_CYAN_COLOR = \e[1;36m
CYAN_COLOR = \e[0;36m
LIGHT_GREEN_COLOR = \e[1;32m
GREEN_COLOR = \e[0;32m
END_COLOR = \e[0m


#=========================== FUNCTION DEFINITIONS =============================#
# Recursive search function
rwildcard = $(wildcard $1$2) $(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2))

# Remove multiple same instances from the list
uniq = $(if $1,$(firstword $1) $(call uniq,$(filter-out $(firstword $1),$1)))


#============================== FILE SCANNING =================================#
# Find all h header files
C_INCS := $(call rwildcard,./,*.h)
# Get only the directories of .h files
C_INC_DIRS := $(dir $(C_INCS))
C_INC_DIRS := $(call uniq,$(sort $(C_INC_DIRS)))
C_INC_DIRS_ECHO := $(addprefix -I$(BLUE_COLOR),$(addsuffix $(END_COLOR),$(C_INC_DIRS)))
# Add -I prefix to all elemets from the list
C_INC_DIRS := $(addprefix -I,$(C_INC_DIRS))

# Find all hpp header files
CXX_INCS := $(call rwildcard,./,*.hpp)
# Get only the directories of .h files
CXX_INC_DIRS := $(dir $(CXX_INCS))
CXX_INC_DIRS := $(call uniq,$(sort $(CXX_INC_DIRS)))
CXX_INC_DIRS_ECHO := $(addprefix -I$(BLUE_COLOR),$(addsuffix $(END_COLOR),$(CXX_INC_DIRS)))
# Add -I prefix to all elemets from the list
CXX_INC_DIRS := $(addprefix -I,$(CXX_INC_DIRS))

# Additional header files
ADDITIONAL_INC_DIRS := $(call uniq,$(sort $(ADDITIONAL_INC_DIRS)))
ADDITIONAL_INC_DIRS_ECHO := $(addprefix -I$(BLUE_COLOR),$(addsuffix $(END_COLOR),$(ADDITIONAL_INC_DIRS)))
# Add -I prefix to all elemets from the list
ADDITIONAL_INC_DIRS := $(addprefix -I,$(ADDITIONAL_INC_DIRS))

# Join h and hpp in same variable
INC_DIRS := $(CXX_INC_DIRS) $(C_INC_DIRS)
# Add additional inc dirs
INC_DIRS := $(ADDITIONAL_INC_DIRS) $(INC_DIRS)
INC_DIRS_ECHO := $(ADDITIONAL_INC_DIRS_ECHO) $(CXX_INC_DIRS_ECHO) $(C_INC_DIRS_ECHO)

# Find all c source files
C_SRCS := $(call rwildcard,./,*.c)
# Set object files by filtering excluded files
C_SRCS := $(filter-out $(EXCLUDED_FILES), $(C_SRCS))
# Remove empty spaces
C_SRCS := $(strip $(C_SRCS))

# Find all cpp source files
CXX_SRCS := $(call rwildcard,./,*.cpp)
# Set object files by filtering excluded files
CXX_SRCS := $(filter-out $(EXCLUDED_FILES), $(CXX_SRCS))
# Remove empty spaces
CXX_SRCS := $(strip $(CXX_SRCS))

# Get object files from c source files
C_OBJS := $(patsubst %c, %o, $(C_SRCS))
# Remove empty spaces
C_OBJS := $(strip $(C_OBJS))

# Get object files from cpp source files
CXX_OBJS := $(patsubst %cpp, %o, $(CXX_SRCS))
# Remove empty spaces
CXX_OBJS := $(strip $(CXX_OBJS))

# Join all objs in one variable
OBJS := $(CXX_OBJS) $(C_OBJS)


#=============================== BUILDING =====================================#
# Rebuild target
rebuild: clean all


# All Targets
all: pre-build main-build post-build


#=============================== COMPILING ====================================#

# Main-build Target
main-build: $(PROJECT_NAME)

$(PROJECT_NAME) : $(addprefix $(OBJDIR),$(OBJS:.%=%))
	-@echo -e '$(PURPLE_COLOR)Building target:$(END_COLOR) $(BLUE_COLOR)$@$(END_COLOR)'
	-@echo -e '$(strip $(ORANGE_COLOR)$(LD)$(END_COLOR) $(LDFLAGS) $(GREEN_COLOR)$^$(END_COLOR) -o "$(BLUE_COLOR)$(PROJECT_NAME)$(END_COLOR)")'
	@$(LD) $^ $(LDFLAGS) -o "$(PROJECT_NAME)"
	-@echo -e '$(PURPLE_COLOR)Finished building target:$(END_COLOR) $(GREEN_COLOR)$@$(END_COLOR)'

$(OBJDIR)/%.o : %.cpp
	-@echo -e '$(PURPLE_COLOR)Building file:$(END_COLOR) $(BLUE_COLOR)$<$(END_COLOR)'
	-@echo -e '$(strip $(ORANGE_COLOR)$(CXX)$(END_COLOR) $(INC_DIRS_ECHO) $(DFLAGS_ECHO) $(CXXFLAGS) -o "$(BLUE_COLOR)$@$(END_COLOR)" -c "$(BLUE_COLOR)$<$(END_COLOR)")'
	@$(CXX) $(INC_DIRS) $(CXXFLAGS) $(DEPFLAGS) $(DEBFLAGS) -o "$@" -c "$<"
	-@echo -e '$(PURPLE_COLOR)Finished building:$(END_COLOR) $(GREEN_COLOR)$<$(END_COLOR)'
	-@echo ' '

$(OBJDIR)/%.o : %.c
	-@echo -e '$(PURPLE_COLOR)Building file:$(END_COLOR) $(BLUE_COLOR)$<$(END_COLOR)'
	-@echo -e '$(strip $(ORANGE_COLOR)$(CC)$(END_COLOR) $(INC_DIRS_ECHO) $(DFLAGS_ECHO) $(CFLAGS) -o "$(BLUE_COLOR)$@$(END_COLOR)" -c "$(BLUE_COLOR)$<$(END_COLOR)")'
	@$(CC) $(INC_DIRS) $(CFLAGS) $(DEPFLAGS) $(DEBFLAGS) -o "$@" -c "$<"
	-@echo -e '$(PURPLE_COLOR)Finished building:$(END_COLOR) $(GREEN_COLOR)$<$(END_COLOR)'
	-@echo ' '


#============================= DEPENDENCIES ===================================#
DEPS := $(OBJS:%.o=%.d)
DEPS := $(addprefix $(OBJDIR),$(DEPS:.%=%))
# Include them as makefiles
ifneq ($(MAKECMDGOALS),clean)
ifneq ($(DEPS),)
-include $(DEPS)
endif
endif


#============================ OTHER TARGETS ===================================#
clean:
	-@echo -e '$(BLUE_COLOR)Cleaning project:$(END_COLOR)'
	-@echo -e '$(ORANGE_COLOR)$(RM)$(END_COLOR) -rf "$(BLUE_COLOR)$(PROJECT_NAME)$(END_COLOR)" $(LIGHT_BLUE_COLOR)$(OBJDIR)$(END_COLOR)'
	-@$(RM) -rf "$(PROJECT_NAME)" $(OBJDIR)
	-@echo -e '$(GREEN_COLOR)Project cleaned.$(END_COLOR)'
	-@echo ''
	-@echo ''


# Map same folder structure to .objs folder
ifeq ($(OS),Windows_NT)
pre-build:
	@echo -e '$(BLUE_COLOR)Start building:$(END_COLOR)'
	@cmd //C IF not exist "$(OBJDIR)" robocopy . .objs  //E //XF "*.*" //XD "$(OBJDIR)"
else 	# Linux
pre-build:
	@echo -e '$(BLUE_COLOR)Start building:$(END_COLOR)'
	@mkdir -p $(OBJDIR)
	@find . -not \( -path "./.*" -prune \) -type d -print0 > .dirs
	@cd $(OBJDIR) && xargs -0 mkdir -p < ../.dirs
	@rm .dirs
endif


post-build:
	@echo -e '$(GREEN_COLOR)Build finished.$(END_COLOR)'
	@echo ''
	@echo ''


.PHONY: all clean pre-build
.SECONDARY: main-build post-build
